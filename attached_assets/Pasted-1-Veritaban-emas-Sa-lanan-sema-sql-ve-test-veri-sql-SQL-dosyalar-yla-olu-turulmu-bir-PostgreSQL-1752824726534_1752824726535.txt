1. Veritabanı Şeması
Sağlanan sema.sql ve test_veri.sql SQL dosyalarıyla oluşturulmuş bir PostgreSQL şeması var.
Ana tablo apis adında; her kayıtta benzersiz api_id (UUID), ad (API ismi), aciklama (ne işe yaradığı), durum (aktif/pasif/hata gibi) ve gerekiyorsa son_calistigi (timestamp) alanları bulunuyor.
Gerekirse başka tablolar (ör. api_versiyonlari, log_kayitlari) da var; ama temel iş akışı apis tablosu çevresinde şekillenecek.
2. Backend
Teknoloji ve Dil Önerisi: Performans, asenkron destek ve otomatik dökümantasyon için Python + FastAPI önerilir. Alternatif olarak Node.js + Express de kullanılabilir, ancak FastAPI’de /docs otomatik Swagger geliyor.
DB Bağlantısı:
Ortam değişkenleri ile (.env veya Replit Secrets): PGHOST, PGUSER, PGPASSWORD, PGDATABASE, PGPORT.
Python’da SQLAlchemy veya asyncpg, Node’da pg paketiyle bağlanın.
RESTful Uç Noktalar:
GET /apis → Tüm API tanımlarını listeler (id, ad, açıklama, durum, son_calistigi).
GET /apis/{id} → Tek bir API’nin detayını getirir.
POST /apis → Yeni bir API tanımı ekler. Gövde: { ad, aciklama, durum }.
PUT /apis/{id} → Var olan tanımı günceller (ad, açıklama veya durumu).
DELETE /apis/{id} → Tanımı siler.
Durum Mantığı:
durum alanına ek olarak, eğer canlı sağlık kontrolleri (health checks) yapılacaksa, arkaplanda periyodik ping atılarak son_calistigi ve calisiyor_mu bilgileri güncellenebilir. Bu ekstra iş mantığı isteğe bağlıdır.
Swagger/OpenAPI: FastAPI’de otomatik /docs, Express’te swagger-ui-express ile /api-docs endpoint’i olarak sunulsun.
Modüler Yapı:
db.py (veritabanı bağlantısı)
models.py (Pydantic/ORM modelleri)
routes/apis.py (tüm /apis rotaları)
main.py (FastAPI app, CORS, static mount)
3. Frontend
Teknoloji: Basit HTML/CSS/JS veya tercihen React.
Özellikler:
API Listesi Sayfası: Tablo veya kartlar; her satırda API adı, açıklama özeti, durum (yeşil/sarı/kırmızı ikonu) ve “Detay”/“Düzenle” butonları.
Detay/Form Sayfası: Seçilen API’nin tüm alanlarını gösteren ve güncellemeye izin veren form. “Kaydet” ile PUT, “Sil” ile DELETE isteği.
Yeni API Ekleme: “Yeni API” formu; POST ile ekleme.
Canlı Durum İzleme (Opsiyonel): Eğer backend health-check desteği veriyorsa, sayfa açıkken durum ikonlarını periyodik güncelleyebilir.
API Entegrasyonu: fetch veya Axios ile backend uç noktalarına istekler. Hata ve başarı bildirimleri gösterilsin.
Stil: Basit ve temiz; tercihen Tailwind CSS ya da Bootstrap ile hızlıca düzen.
4. Deployment & Replit Konfigürasyonu
Proje Yapısı:
/backend
  ├─ main.py
  ├─ db.py
  ├─ models.py
  └─ routes/apis.py
/frontend
  ├─ public/
  └─ src/
.env        ← Replit Secrets otomatik eklenir
requirements.txt  or package.json
Run Komutu:
FastAPI: uvicorn backend.main:app --host=0.0.0.0 --port=$PORT
Express: node backend/index.js
Ortam Değişkenleri: Replit’in Secrets (🔒) bölümünde ayarlanacak.
Statik Dosyalar: Frontend build’i backend tarafından StaticFiles veya express.static ile servis edilecek.
5. Kullanım Örnekleri
GET /apis çağrısı => JSON dizi olarak tüm API’ler.
POST /apis ile { "ad": "FiloServis", "aciklama": "Araç filo verileri", "durum": "aktif" } gönder => 201 Created, yeni api_id.
PUT /apis/{id} ile durumu "pasif" yap => 200 OK.
DELETE /apis/{id} => 204 No Content.
